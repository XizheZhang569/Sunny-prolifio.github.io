<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sunny Installation Portfolio</title>
  <script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.11.1/math.min.js"></script>
  <style>
    body {
      font-family: 'Helvetica Neue', sans-serif;
      padding: 30px;
      background-color: #f9f9f9;
      color: #333;
    }
    h2 {
      text-align: center;
      margin-bottom: 30px;
    }
    label {
      display: block;
      margin: 8px 0 4px;
    }
    input[type="range"] {
      width: 100%;
    }
    .slider-group {
      margin-bottom: 12px;
    }
    .slider-group span {
      float: right;
      font-size: 0.9em;
      color: #666;
    }
    #controls {
      max-width: 500px;
      margin: 0 auto 20px auto;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    button {
      margin-top: 10px;
      margin-right: 10px;
      padding: 6px 12px;
      font-size: 14px;
    }
    #functionDisplay {
      max-width: 500px;
      margin: 0 auto;
      font-family: monospace;
      background: #eef;
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <h2>Sunny Installation Portfolio｜Emotional Tension Surface Generator</h2>

  <div id="controls">
    <div class="slider-group">
      <label for="joy">Joy to Sadness: <span id="joyVal">1</span></label>
      <input type="range" id="joy" min="-1" max="1" step="0.1" value="1" oninput="document.getElementById('joyVal').innerText = this.value">
    </div>
    <div class="slider-group">
      <label for="trust">Trust to Disgust: <span id="trustVal">1</span></label>
      <input type="range" id="trust" min="-1" max="1" step="0.1" value="1" oninput="document.getElementById('trustVal').innerText = this.value">
    </div>
    <div class="slider-group">
      <label for="fear">Anger to Fear: <span id="fearVal">1</span></label>
      <input type="range" id="fear" min="-1" max="1" step="0.1" value="1" oninput="document.getElementById('fearVal').innerText = this.value">
    </div>
    <div class="slider-group">
      <label for="surprise">Anticipation to Surprise: <span id="surpriseVal">1</span></label>
      <input type="range" id="surprise" min="-1" max="1" step="0.1" value="1" oninput="document.getElementById('surpriseVal').innerText = this.value">
    </div>
    <div class="slider-group">
      <label for="naturalness">Naturalness: <span id="naturalnessVal">1</span></label>
      <input type="range" id="naturalness" min="0" max="1" step="0.1" value="1" oninput="document.getElementById('naturalnessVal').innerText = this.value">
    </div>
    <br>
    <button onclick="updatePlot()">Generate Surface</button>
    <button onclick="downloadPlot()">Export Image (PNG)</button>
    <button onclick="copyFunction()">Copy Function Expression</button>
  </div>

  <div id="functionDisplay"></div>
  <div id="plot" style="width: 100%; height: 80vh;"></div>

  <script>
    let currentFunction = '';

    function updatePlot() {
      let joy = parseFloat(document.getElementById('joy').value);
      let trust = parseFloat(document.getElementById('trust').value);
      let fear = parseFloat(document.getElementById('fear').value);
      let surprise = parseFloat(document.getElementById('surprise').value);
      let N = parseFloat(document.getElementById('naturalness').value);

      let points = [[1, 1], [-1, 1], [-1, -1], [1, -1]];
      let Z = [joy, trust, fear, surprise];
      let M = points.map(([x, y]) => [x * y, x, y, 1]);

      let MT = math.transpose(M);
      let MTM = math.multiply(MT, M);
      let MTB = math.multiply(MT, Z);
      let coeffs = math.lusolve(MTM, MTB).map(row => row[0]);
      let [a, b, c, d] = coeffs;

      currentFunction = `z(x, y) = ${a.toFixed(3)}·xy + ${b.toFixed(3)}·x + ${c.toFixed(3)}·y + ${d.toFixed(3)} (Controlled by N)`;
      document.getElementById('functionDisplay').innerText = currentFunction;

      let resolution = Math.round(N * 50 + 10);
      let x = [], y = [], z = [], color = [];
      for (let i = 0; i <= resolution; i++) {
        let xi = -1 + 2 * i / resolution;
        let rowX = [], rowY = [], rowZ = [], rowColor = [];
        for (let j = 0; j <= resolution; j++) {
          let yj = -1 + 2 * j / resolution;
          rowX.push(xi);
          rowY.push(yj);
          let zVal = a * xi * yj + b * xi + c * yj + d;
          rowZ.push(zVal);
          let distance = (xi * xi + yj * yj) / 2;
          let exponent = 1.5 - N;
          let mapped = Math.pow(distance, exponent);
          rowColor.push(mapped);
        }
        x.push(rowX);
        y.push(rowY);
        z.push(rowZ);
        color.push(rowColor);
      }

      let surface = {
        type: 'surface',
        x: x, y: y, z: z,
        surfacecolor: color,
        colorscale: 'Jet',
        showscale: true,
        cmin: 0, cmax: 1,
        colorbar: {
          title: '',
          tickvals: [0, N, 1],
          ticktext: ['Low', `Naturalness: ${N.toFixed(2)}`, 'High'],
          thickness: 15,
          tickfont: { color: 'black', size: 12 },
          len: 1,
          outlinewidth: 0
        },
        opacity: 1,
        lighting: { ambient: 0.6, diffuse: 0.8, specular: 0.1 },
        hoverinfo: 'skip',
        name: ''
      };

      let edgeCoords = [
        [1, 1, 1], [-1, 1, 1], [-1, -1, 1], [1, -1, 1], [1, 1, 1],
        [1, 1, -1], [-1, 1, -1], [-1, -1, -1], [1, -1, -1], [1, 1, -1],
        [-1, 1, -1], [-1, 1, 1], [-1, -1, 1], [-1, -1, -1], [1, -1, -1],
        [1, -1, 1], [1, 1, 1]
      ];

      let cubeLines = {
        type: 'scatter3d',
        mode: 'lines',
        line: { color: 'black', width: 2 },
        x: edgeCoords.map(p => p[0]),
        y: edgeCoords.map(p => p[1]),
        z: edgeCoords.map(p => p[2]),
        name: ''
      };

      let labels = {
        type: 'scatter3d',
        mode: 'text',
        text: ['Joy', 'Trust', 'Anger', 'Anticipation', 'Sadness', 'Disgust', 'Fear', 'Surprise'],
        textposition: 'top center',
        textfont: { size: 14, color: 'black' },
        x: [1, -1, -1, 1, 1, -1, -1, 1],
        y: [1, 1, -1, -1, 1, 1, -1, -1],
        z: [1.05, 1.05, 1.05, 1.05, -1.2, -1.2, -1.2, -1.2]
      };

      let layout = {
        scene: {
          xaxis: { title: '', range: [-1.2, 1.2] },
          yaxis: { title: '', range: [-1.2, 1.2] },
          zaxis: { title: '', range: [-1.2, 1.2] }
        },
        title: currentFunction,
        margin: { l: 0, r: 0, b: 0, t: 50 },
        showlegend: false
      };

      Plotly.newPlot('plot', [surface, cubeLines, labels], layout);
    }

    function downloadPlot() {
      Plotly.downloadImage('plot', { format: 'png', filename: 'Sunny_Emotion_Surface' });
    }

    function copyFunction() {
      navigator.clipboard.writeText(currentFunction).then(() => {
        alert('Function copied!');
      });
    }
  </script>
</body>
</html>
